***********************************************************************************************
CS 525 - Advanced Database Organisation
Assignment 2 - Buffer Manager

*********************************       
      Group 5 Members:       
*********************************

Name - Suhas Palani
CWID - A20548277
Email- rtopannavar@hawk.iit.edu 


Name - Ramyashree Raghunandan 
CWID - A20541091
Email- rraghunandan@hawk.iit.edu


Name - Arpitha Hebri Ravi Vokuda    
CWID - A20541502 
Email- avokuda@hawk.iit.edu


*********************************
   Steps to run the code :
*********************************
The below commands should be executed in the terminal in order to run the code.
Step 1:
Command: $ make clean

Description: To clear the data use the above command.

Step 2:
Command: $ make

Description: This creates an executable file "test_assign1". 

Step 3:
Command: $ ./test_assign1

Description: This command executes the executable file which is newly created.

Note:
If it's necessary to execute the code again, we should clear the files and then restart the process.



*********************************
    BUFFER POOL FUNCTIONS:
*********************************

Function Name: initBufferPool()
Author: Suhas Palani	
Description: This function sets up the page cache by initializing a buffer pool containing page frames and IDs.The name of the page file from which pages are loaded into memory is kept in the 'pg_FName' variable.The chosen page replacement technique (FIFO, LRU, LFU, or CLOCK) for this buffer pool is indicated by the 'approach' argument.If more parameters need to be sent to the selected page replacement technique, 'approachData' can be utilized. 
parameters used: BM_BufferPool *const bp, const char *const pg_FName, const int p_id, ReplacementStrategy approach, void *approachData


Function Name: shutdownBufferPool()
Author: Ramyashree Raghunandan
Description:This function shutdowns the buffer pool, freeing resources and writing modified pages to disk using forceFlushPool(), while throwing a RC_PINNED_PAGES_IN_BUFFER error if any pages are still in use. 
parameters used: BM_BufferPool *const bp


Function Name: forceFlushPool()
Author: Rashmi Venkatesh Topannavar
Description: This function writes all the dirty pages (modified pages whose dirtyBit = 1) to the disk.
Parameters used: BM_BufferPool *const bp


*********************************
    PAGE MANAGEMENT FUNCTIONS:
*********************************

Function Name: unpinPage()
Author: Suhas Palani
Description: This function determines whether the pin-related task has been finished, and if so, it unpins the page.
Parameters :  BM_BufferPool *const bp, BM_PageHandle *const pg


Function Name: forcePage()
Author: Rashmi Venkatesh Topannavar
Description: This function writes the contents of the modified pages back to the page file on disk.
Parameters : BM_BufferPool *const bp, BM_PageHandle *const pg


Function Name: pinPage()
Author: Ramyashree Raghunandan, Arpitha Hebri Ravi Vokuda, Rashmi Venkatesh Topannavar
Description: This function pins a page by taking the corresponding page file from the disk.It checks if the buffer pool is empty before pinning the page. If there is no empty space in the page frame, it invokes page replacement algorithms. If the 'modified' flag is set to one, the page is replaced by a new page according to the page replacement algorithms.
Parameters : BM_BufferPool *const bp, BM_PageHandle *const p_handle, const PageNumber pageid

Function Name: markDirty()
Author: Ramyashree Raghunandan
Description: This function will set the modified bit to 1 for a modified page 
Parameters : BM_BufferPool *const bm, BM_PageHandle *const page

*********************************
    STATISTICS FUNCTIONS:
*********************************

Function Name: getFrameContents()
Author: Suhas Palani
Description: If there is a file pointer present, this function will store and return the content after obtaining the pageId of the page frame.
Parameters : BM_BufferPool *const bm

Function Name: getDirtyFlags()
Author: Arpitha Hebri Ravi Vokuda
Description: The purpose of this function is to provide an array that conveys the state of dirty flags. If a page has been modified, the corresponding entry in the array is set to 'true,' otherwise, it is updated as 'false.'
Parameters : BM_BufferPool *const bm


Function Name: getFixCounts()
Author: Rashmi Venkatesh Topannavar
Description: This function will return an array containing the fix count of the page frame. 
Parameters:  BM_BufferPool *const bm


Function Name: getNumReadIO()
Author: Suhas Palani
Description: The number of pages read from the disk is provided by this function. 
Parameters : BM_BufferPool *const bm


Function Name: getNumWriteIO()
Author: 
Description: This function gives back the total count of pages that have been written to the disk. The variable num_write is utilized to obtain the count of writes. 
Parameters : BM_BufferPool *const bm

Function Name: copyPageFrames()
Author: Suhas Palani
Description: The contents of a source page will be copied to a target page by this function. 
Parameters : PageFrame *dest, int index,PageFrame *src

Function Name: writePageFramse()
Author: Ramyashree Raghunandan
Description: This functions will copy the contents from a srource page to destination page. 
Parameters : BM_BufferPool *const bp,  PageFrame *page_f, int page_index


********************************************
    PAGE REPLACEMENT ALGORITHM FUNCTIONS:
********************************************

Function Name: FIFO()
Author: Arpitha Hebri Ravi Vokuda
Description: Its content is written back to the page file on disk when a page is found, and at that position the new page. The first-in page is the first to be replaced when the buffer pool is full, the FIFO function operates by treating the buffer pool as a queue. 
Parameters : BM_BufferPool *const bp, PageFrame *pf


Function Name: LRU()
Author: Suhas Palani
Description: This function eliminates from the buffer pool any page frame that hasn't been utilized recently or for an extended period of time.
Parameters : BM_BufferPool *const bp, PageFrame *pf


Function Name: LRU_K()
Author: Ramyashree Raghunandan
Parameters : BM_BufferPool *const bp, PageFrame *pf


Function Name: CLOCK()
Author: Arpitha Hebri Ravi Vokuda
Description: CLOCK algorithm keeps a track of the last added page frame in the buffer pool. Also, we use a clockPointer which is a counter to point the page frames in the buffer pool.
Parameters : BM_BufferPool *const bp, PageFrame *pf

*********************************************************************************************

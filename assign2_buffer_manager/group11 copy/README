***********************************************************************************************
CS 525 - Advanced Database Organisation
Assignment 2 - Buffer Manager

*********************************       
      Group 3 Members:       
*********************************

Name - Suhas Palani
CWID - A20548277
Email- rtopannavar@hawk.iit.edu 


Name - Nishchal Gante Ravish 
CWID - A20540635
Email- nganteravish@hawk.iit.edu


Name - Uday Venkatesha   
CWID - A20547055 
Email- uvenkatesha@hawk.iit.edu


*********************************
   Steps to run the code :
*********************************
The below commands should be executed in the terminal in order to run the code.
Step 1:
Command: $ make clean

Description: To clear the data use the above command.

Step 2:
Command: $ make

Description: This creates an executable file "test_assign1". 

Step 3:
Command: $ ./test_assign1

Description: This command executes the executable file which is newly created.

Note:
If it's necessary to execute the code again, we should clear the files and then restart the process.



*********************************
    BUFFER POOL FUNCTIONS:
*********************************

Function Name: initBufferPool()
Author: Suhas Palani	
Description: This function sets up the page cache by initializing a buffer pool containing page frames and IDs.The name of the page file from which pages are loaded into memory is kept in the 'pg_FName' variable.The chosen page replacement technique (FIFO, LRU, LFU, or CLOCK) for this buffer pool is indicated by the 'approach' argument.If more parameters need to be sent to the selected page replacement technique, 'approachData' can be utilized. 
parameters used: BM_BufferPool *const bp, const char *const pg_FName, const int p_id, ReplacementStrategy approach, void *approachData


Function Name: shutdownBufferPool()
Author: Uday Venkatesha
Description:This method uses forceFlushPool() to write updated pages to disc and shuts down the buffer pool, freeing up resources. If any pages are still being used, it throws an RC_PINNED_PAGES_IN_BUFFER exception.
parameters used: BM_BufferPool *const bp


Function Name: forceFlushPool()
Author: Nishchal Gante Ravish
Description: This function is used to write every modified page with a dirtyBit of 1 which basically are dirty pages to the disc.
The parameters used are BM_BufferPool *const bp


*********************************
    PAGE MANAGEMENT FUNCTIONS:
*********************************

Function Name: unpinPage()
Author: Suhas Palani
Description: This function determines whether the pin-related task has been finished, and if so, it unpins the page.
Parameters :  BM_BufferPool *const bp, BM_PageHandle *const pg


Function Name: forcePage()
Author: Nishchal Gante Ravish
Description: This function is used to modify contents of the updated pages are written back into the disc page file.
Parameters used -> BM_BufferPool *const bp, BM_PageHandle *const pg


Function Name: pinPage()
Author: Uday Venkatesha
Description: This function uses the relevant page file from the disc to pin a page.Before pinning the page, it determines whether the buffer pool is empty. Page replacement algorithms are triggered if the page frame is not empty. The page replacement algorithms replace the existing page with a new one if the'modified' flag is set to one.
Parameters : BM_BufferPool *const bp, BM_PageHandle *const p_handle, const PageNumber pageid

Function Name: markDirty()
Author: Uday Venkatesha
Description: For a modified page, this function will set the modified bit to 1. 
Parameters : BM_BufferPool *const bm, BM_PageHandle *const page

*********************************
    STATISTICS FUNCTIONS:
*********************************

Function Name: getFrameContents()
Author: Suhas Palani
Description: If there is a file pointer present, this function will store and return the content after obtaining the pageId of the page frame.
Parameters : BM_BufferPool *const bm

Function Name: getDirtyFlags()
Author: Nishchal Gante Ravish
Description: This function is used to output an array that represents the dirty flags current state. and the corresponding entry in the array is updated as false if the page has not been modified, and is set to true otherwise.
Parameters : BM_BufferPool *const bm


Function Name: getFixCounts()
Author: Uday Venkatesha 
Description: This function will return an array containing the fix count of the page frame. 
Parameters:  BM_BufferPool *const bm


Function Name: getNumReadIO()
Author: Suhas Palani
Description: The number of pages read from the disk is provided by this function. 
Parameters : BM_BufferPool *const bm


Function Name: getNumWriteIO()
Author: Nishchal Gante Ravish
Description: This function returns the total number of pages that are written to disc and the value count is saved to the var num_write
Parameters : BM_BufferPool *const bm

Function Name: copyPageFrames()
Author: Suhas Palani
Description: The contents of a source page will be copied to a target page by this function. 
Parameters : PageFrame *dest, int index,PageFrame *src

Function Name: writePagesFrames()
Author: Nishchal Gante Ravish
Description: This function copies the contents from source page to destination.
Parameters : BM_BufferPool *const bp,  PageFrame *page_f, int page_index


********************************************
    PAGE REPLACEMENT ALGORITHM FUNCTIONS:
********************************************

Function Name: FIFO()
Author: Uday Venkatesha
Description: When a page is located, its content is written back to the disc page file, along with the new page at that place. When the buffer pool fills up, the first-in page gets replaced first; this is how the FIFO function works: the buffer pool is treated like a queue. 
Parameters : BM_BufferPool *const bp, PageFrame *pf


Function Name: LRU()
Author: Suhas Palani
Description: This function eliminates from the buffer pool any page frame that hasn't been utilized recently or for an extended period of time.
Parameters : BM_BufferPool *const bp, PageFrame *pf


Function Name: LRU_K()
Author: Nishchal Gante Ravish
Description: This function is used to implement and update the LRU page replacement by updating the frames of the LRU numbers
Parameters used are -> BM_BufferPool *const bp, PageFrame *pf


Function Name: CLOCK()
Author: Uday Venkatesha
Description: The most recent page frame added to the buffer pool is tracked by the CLOCK algorithm. Also, we position the page frames in the buffer pool using a clockPointer, which is a counter.
Parameters : BM_BufferPool *const bp, PageFrame *pf

*********************************************************************************************
